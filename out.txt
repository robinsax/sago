
C:\Users\USER\Desktop\sago>set NODE_PATH=. 

C:\Users\USER\Desktop\sago>node sago up --app=./tests --full --down   | psql --username=postgres 
DROP DATABASE
ALTER ROLE
ALTER ROLE
CREATE DATABASE
You are now connected to database "sago_test" as user "postgres".
CREATE EXTENSION
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
GRANT

C:\Users\USER\Desktop\sago>npx c8 --exclude tests node ./tests 
---- 0-queries.js
Invalid query dies (insert)
  [32mpassed[0m
Invalid query dies (update)
  [32mpassed[0m
Invalid query dies (update with invalid value)
  [32mpassed[0m
Invalid query dies (update with limit)
  [32mpassed[0m
insert into ingredient_types ( name ) values ( $1 ) returning id; [ 'a' ]
Insertion works
  [32mpassed[0m
Update runs without error
update ingredient_types set name = $1 where name != $2; [ 'b', 'b' ]
  [32mpassed[0m
select name from ingredient_types where name < $1 limit $2; [ 'c', 1 ]
Update works
  [32mpassed[0m
delete from ingredient_types where id = $1 returning id id; [ '29e2e57f-dbff-44e7-b7dd-39d75732b55c' ]
Deletion return works
  [32mpassed[0m
---- 1-single-model.js
Attribute proxy sets
  [32mpassed[0m
Attribute type enforced
  [32mpassed[0m
Attribute type enforced
  [32mpassed[0m
Attribute format enforced
  [32mpassed[0m
begin transaction;
insert into ingredient_types ( name ) values ( $1 ) returning id; [ 'fish' ]
commit;
IDs assigned
  [32mpassed[0m
select * from ingredient_types where true limit $1; [ 1 ]
Reloading maintains ID
  [32mpassed[0m
select * from ingredient_types where name = $1 limit $2; [ 'fish', 1 ]
Simple model refreshes and queries
  [32mpassed[0m
select * from ingredient_types where name != $1; [ 'fish' ]
Empty query = empty list
  [32mpassed[0m
begin transaction;
delete from ingredient_types where id = $1 returning id; [ 'a51ca167-1430-4993-b757-0ae95db21e2f' ]
commit;
---- 2-ephemeral-relations.js
Local assignment to one-side proxy
  [32mpassed[0m
Remote value after assignment to one-side proxy
  [32mpassed[0m
Local clear of one-side proxy
  [32mpassed[0m
Remote value after clear of one-side proxy
  [32mpassed[0m
Local assignment of many-side proxy
  [32mpassed[0m
Remote value after assignment to many-side proxy
  [32mpassed[0m
Local clear of many-side proxy
  [32mpassed[0m
Remote value after clear of many-side proxy
  [32mpassed[0m
Constructor coupling of ephemeral models
  [32mpassed[0m
In-memory sorting of many-side proxies
  [32mpassed[0m
Retrieved many-side view is immutable
  [32mpassed[0m
Valid deep relationship write from top node doesn't error
  [32mpassed[0m
begin transaction;
insert into ingredient_types ( name ) values ( $1 ) returning id; [ 'fish' ]
insert into ingredients ( name, type_id ) values ( $1 , $2 ) returning id; [ 'salmon', '60580afb-fe64-4ad5-b65e-bfa77139a79e' ]
insert into ingredients ( name, type_id ) values ( $1 , $2 ) returning id; [ 'trout', '60580afb-fe64-4ad5-b65e-bfa77139a79e' ]
insert into recipes ( name ) values ( $1 ) returning id , last_cooked_at; [ 'fish dinner' ]
insert into ingredient_items ( recipe_id, ingredient_id, quantity ) values ( $1 , $2 , $3 ) returning id; [
  '8e146e51-0ff8-464e-8674-7bbcf4e34923',
  '9666d01b-b7db-4282-aaaf-d20ac90cad62',
  '2 whole fish'
]
commit;
Deep relationship write assigns IDs and FKs
  [32mpassed[0m
Invalid deep relationship write from top node errors
begin transaction;
insert into recipes ( name ) values ( $1 ) returning id , last_cooked_at; [ 'salad' ]
rollback;
  [32mpassed[0m
begin transaction;
insert into recipes ( id, name, last_cooked_at ) values ( $1 , $2 , $3 ); [
  '93c70e34-d5f0-42f4-9d34-7dc1071bd516',
  'salad',
  2019-10-20T00:23:52.036Z
]
delete from recipes where id = $1 returning id; [ '93c70e34-d5f0-42f4-9d34-7dc1071bd516' ]
update ingredients set type_id = $1 where id = $2; [
  '60580afb-fe64-4ad5-b65e-bfa77139a79e',
  '9666d01b-b7db-4282-aaaf-d20ac90cad62'
]
update ingredients set type_id = $1 where id = $2; [
  '60580afb-fe64-4ad5-b65e-bfa77139a79e',
  '81e71379-5b7a-4bcc-b1c7-fa089158fd62'
]
update ingredient_items set ingredient_id = $1 , recipe_id = $2 where id = $3; [
  '9666d01b-b7db-4282-aaaf-d20ac90cad62',
  '8e146e51-0ff8-464e-8674-7bbcf4e34923',
  '138ccf1a-10e2-41a0-97c2-7ace4f83bfa2'
]
commit;
---- 3-reconstruction.js
select * from recipes where true; []
Basic reconstruction
  [32mpassed[0m
select * from ingredient_items where recipe_id = $1 order by quantity desc; [ '8e146e51-0ff8-464e-8674-7bbcf4e34923' ]
Lazy-loaded relationships are async
  [32mpassed[0m
Async loads return sane value
  [32mpassed[0m
---- 4-serialization.js
select * from recipes where name = $1 limit $2; [ 'fish dinner', 1 ]
Synchronous direct serialization runs
  [32mpassed[0m
Cosmetic serialized output check
  [32mpassed[0m
Asynchronous serialization runs
select * from ingredient_items where recipe_id = $1 order by quantity desc; [ '8e146e51-0ff8-464e-8674-7bbcf4e34923' ]
  [32mpassed[0m
Serialization has good shape
  [33mfailed[0m
Bulk update throws attribute errors
  [32mpassed[0m
Bulk serialized update succeeds
  [32mpassed[0m
---- 5-loaded-relations.js
select * from recipes where name = $1 limit $2; [ 'fish dinner', 1 ]
select * from ingredient_items where recipe_id = $1 limit $2; [ '8e146e51-0ff8-464e-8674-7bbcf4e34923', 1 ]
Unloaded relationship modification dies
  [32mpassed[0m
select * from ingredient_items where recipe_id = $1 order by quantity desc; [ '8e146e51-0ff8-464e-8674-7bbcf4e34923' ]
Relations valid after many-side loading
  [32mpassed[0m
De-coupling succeeds if a side effect of model deletion
  [32mpassed[0m
Re-coupling via proxy works
  [32mpassed[0m
De-coupling via many-side updates both sides
  [32mpassed[0m
Coupling via FK updates both sides
  [32mpassed[0m
De-coupling via FK updates both sides
  [32mpassed[0m
Many-side entry into relationship causes previous relationship unlink
  [32mpassed[0m
select * from ingredients where name = $1 limit $2; [ 'salmon', 1 ]
Ephemeral many-side deletion updates bound one-side
  [32mpassed[0m
select * from recipes where name = $1 limit $2; [ 'fish dinner', 1 ]
select * from ingredient_items where recipe_id = $1 limit $2; [ '8e146e51-0ff8-464e-8674-7bbcf4e34923', 1 ]
select * from ingredients where id = $1 limit $2; [ '9666d01b-b7db-4282-aaaf-d20ac90cad62', 1 ]
select * from recipes where id = $1 limit $2; [ '8e146e51-0ff8-464e-8674-7bbcf4e34923', 1 ]
Row-bound relation to loaded many-side resolved on query
  [33mfailed[0m
Ephemeral relation formed on one-side
  [32mpassed[0m
Many-side deletion updates one-side across unloaded relationship
  [32mpassed[0m
---- 6-query-interop.js
---- 6-relation-ordering.js
begin transaction;
insert into ingredient_types ( name ) values ( $1 ) returning id; [ 'vegetable' ]
insert into ingredients ( name, type_id ) values ( $1 , $2 ) returning id; [ 'arugula', '41dcf5bf-42c7-42d4-8581-22e7b09b5b99' ]
insert into ingredients ( name, type_id ) values ( $1 , $2 ) returning id; [ 'radish', '41dcf5bf-42c7-42d4-8581-22e7b09b5b99' ]
insert into ingredients ( name, type_id ) values ( $1 , $2 ) returning id; [ 'brocolli', '41dcf5bf-42c7-42d4-8581-22e7b09b5b99' ]
insert into recipes ( name ) values ( $1 ) returning id , last_cooked_at; [ 'garden salad' ]
insert into ingredient_items ( recipe_id, ingredient_id, quantity ) values ( $1 , $2 , $3 ) returning id; [
  '950d4417-aacf-4aaf-8918-2790119298fb',
  '09660d89-c1d4-4940-9909-44dff9979196',
  'six'
]
insert into ingredient_items ( recipe_id, ingredient_id, quantity ) values ( $1 , $2 , $3 ) returning id; [
  '950d4417-aacf-4aaf-8918-2790119298fb',
  '52dab6e2-456a-48c8-ad15-cd698dcbb81d',
  'one'
]
insert into ingredient_items ( recipe_id, ingredient_id, quantity ) values ( $1 , $2 , $3 ) returning id; [
  '950d4417-aacf-4aaf-8918-2790119298fb',
  'cf0d722e-9e34-4702-b2aa-6843a13af93e',
  'two'
]
commit;
Creation is okay
  [32mpassed[0m
Asc. relation order is correct after creation
  [32mpassed[0m
Desc. relation order is correct after creation
  [32mpassed[0m
Desc. re-order correct
  [32mpassed[0m
---- 7-programming-errors.js
[32m53 passed[0m | [33m2 failed[0m | [31m0 errored[0m
---------------|----------|----------|----------|----------|-------------------|
File           |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |
---------------|----------|----------|----------|----------|-------------------|
All files      |     91.8 |    79.85 |    86.78 |     91.8 |                   |
 attributes.js |    93.92 |    91.67 |     87.5 |    93.92 |... 54,155,156,157 |
 database.js   |    86.22 |    63.27 |    73.68 |    86.22 |... 86,387,388,389 |
 errors.js     |     97.5 |      100 |       80 |     97.5 |          70,71,72 |
 index.js      |      100 |       75 |      100 |      100 |                37 |
 model.js      |    91.01 |    76.67 |      100 |    91.01 |... 88,289,290,291 |
 query.js      |    90.71 |    64.86 |    83.33 |    90.71 |... 26,227,228,264 |
 relations.js  |    93.08 |    83.47 |    94.74 |    93.08 |... 09,710,745,746 |
 session.js    |    95.13 |    87.96 |    95.65 |    95.13 |... 48,549,582,583 |
 sql.js        |    55.38 |      100 |       40 |    55.38 |... 32,33,34,35,36 |
 types.js      |    93.66 |    78.72 |       80 |    93.66 |... 70,271,276,277 |
 utils.js      |    97.37 |    95.24 |      100 |    97.37 |             28,29 |
---------------|----------|----------|----------|----------|-------------------|
